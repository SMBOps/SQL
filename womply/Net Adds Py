#!/usr/bin/env python
"""
Created on Thu Aug 20 16:27:47 2015

@author: jshu
"""

import re
import csv
import pandas as pd
import numpy as np
import json
from sqlalchemy import *
from collections import Counter
from datetime import datetime as dt
from datetime import timedelta as td
from isoweek import Week

def womply_engine():
    DB_URI = "mysql://{user}:{password}@{host}:{port}/{db}"
    
    engine = create_engine(DB_URI.format(
      user ='reports',
      password = 'honeybadger2015',
      host = '10.0.2.100',
      port = '3306',
      db = 'womply')
      )
    return engine

def get_results(query):
    # Generic SQL request based on provided query
    engine = womply_engine()
    connection = engine.connect()
    result = connection.execute(text(query))
    connection.close()

    return result

def get_sql_data():
    with open('./net_adds_query.sql', 'r') as f:
        query = f.read()

    query = re.sub('[\t\n]', ' ', query)
    results = get_results(query)
    data = [row for row in results]
    headers = ['ml', 'claim_date', 'downgrade_date', 'partner_name', 'downgrade_reason']
    data = pd.DataFrame(data, columns = None)
    data.columns = headers

    claim_weeks = [week_of_str(get_week_of(i)) if i else None for i in data.claim_date]
    dg_weeks = [week_of_str(get_week_of(i)) if i else None for i in data.downgrade_date]

    data['claim_week'] = claim_weeks
    data['dg_week'] = dg_weeks

    claims_real = [i for i in data.claim_date if i]
    dgs_real = [i for i in data.downgrade_date if i]

    start_week = get_week_of(min(min(claims_real),min(dgs_real)))
    end_week = get_week_of(max(max(claims_real),max(dgs_real)))

    return data, claim_weeks, dg_weeks, start_week, end_week

def get_week_of(date):
    year, week, day = dt.isocalendar(date)
    return Week(year, week).monday()

def week_of_str(d):
    return 'Week of {}-{}-{}'.format(d.month, d.day, d.year)

def get_week_count(header, _list):
    counter = Counter(_list)
    temp = []
    for week in header:
        try:
            temp.append(counter[week])
        except:
            temp.append(0)
    return temp

def get_all_weeks(start_week, end_week):
    build_week = start_week
    weeks = []

    while build_week <= end_week:
        weeks.append(week_of_str(get_week_of(build_week)))
        build_week += td(days = 7)
    return weeks

def get_master_table(data, weeks, claim_weeks, dg_weeks, beg_of_yr):

    weekly_claims = np.array(get_week_count(weeks, claim_weeks))
    weekly_dgs = np.array(get_week_count(weeks, dg_weeks))
    weekly_net_adds = weekly_claims - weekly_dgs
    weekly_cumulative = np.cumsum(weekly_net_adds)

    data_all = np.array([weekly_cumulative, weekly_claims, weekly_dgs, weekly_net_adds])
    data_ytd = data_all[:,beg_of_yr:]

    df_all = pd.DataFrame(data_all, index = ['Cumulative Claimed', 'Claims','Downgrades','Net Adds'], columns = weeks)
    df_ytd = df_all[df_all.columns[beg_of_yr:]]

    return df_all, df_ytd


def get_dg_breakdown(data, weeks, claim_weeks, dg_weeks, beg_of_yr):
    
    all_partners = [i for i in set(data.partner_name) if i]
    all_reasons = [i for i in set(data.downgrade_reason) if i]
    
    all_partners.sort()
    all_reasons.sort()

    dg_partners = {}
    dg_reasons = {}

    for partner in all_partners:
        dg_partners[partner] = []
    for reason in all_reasons:
        dg_reasons[reason] = []

    dg_partners['NA'] = []
    dg_reasons['NA'] = []

    for week in weeks:
        df = data[data.dg_week == week]
        total_dgs = len(df)

        partner_counter = Counter(df.partner_name)
        reason_counter = Counter(df.downgrade_reason)

        for partner in all_partners:
            try:
                dg_partners[partner].append(partner_counter[partner])
            except:
                dg_partners[partner].append(0)
        dg_partners['NA'].append(partner_counter[None])
        for reason in all_reasons:
            try:
                dg_reasons[reason].append(reason_counter[reason])
            except:
                dg_reasons[reason].append(0)
        dg_reasons['NA'].append(reason_counter[None])

    dg_partners_table = []
    dg_reasons_table = []

    for partner in all_partners:
        dg_partners_table.append(dg_partners[partner])
    dg_partners_table.append(dg_partners['NA'])
    for reason in all_reasons:
        dg_reasons_table.append(dg_reasons[reason])
    dg_reasons_table.append(dg_reasons['NA'])

    dg_partners_table = pd.DataFrame(dg_partners_table, index = all_partners + ['NA'], columns = weeks)
    dg_reasons_table = pd.DataFrame(dg_reasons_table, index = all_reasons + ['NA'], columns = weeks)

    return dg_partners_table, dg_reasons_table

def get_reason_pcts(df_all, df_ytd, reasons, reasons_short):
    pct_long = []
    pct_short = []

    dg_total = df_all.ix['Downgrades']
    for reason in reasons.index:
        pct_long.append((reasons.ix[reason] / dg_total).tolist())
    dg_total = df_ytd.ix['Downgrades']
    for reason in reasons_short.index:
        pct_short.append((reasons_short.ix[reason] / dg_total).tolist())

    pct_long = pd.DataFrame(pct_long, index = reasons.index)
    pct_short = pd.DataFrame(pct_short, index = reasons_short.index)

    return pct_long, pct_short


def main():
    data, claim_weeks, dg_weeks, start_week, end_week = get_sql_data()

    weeks = get_all_weeks(start_week, end_week)
    beg_of_yr = weeks.index(week_of_str(get_week_of(dt(2015,1,1))))

    df_all, df_ytd = get_master_table(data, weeks, claim_weeks, dg_weeks, beg_of_yr)
    partners, reasons = get_dg_breakdown(data, weeks, claim_weeks, dg_weeks, beg_of_yr)
    partners_short = partners[partners.columns[beg_of_yr:]]
    reasons_short = reasons[reasons.columns[beg_of_yr:]]
    pct_long, pct_short = get_reason_pcts(df_all, df_ytd, reasons, reasons_short)

    writer = pd.ExcelWriter('weekly_net_adds.xlsx')
    df_ytd.to_excel(writer, sheet_name = 'YTD')
    partners_short.to_excel(writer, sheet_name = 'YTD', startrow = len(df_ytd) + 2)
    reasons_short.to_excel(writer, sheet_name = 'YTD', startrow = len(df_ytd) + 2 + len(partners_short) + 2)
    pct_short.to_excel(writer, sheet_name = 'YTD', startrow = len(df_ytd) + 2 + len(partners_short) + 2 + len(reasons_short) + 2, header = False)

    df_all.to_excel(writer, sheet_name = 'All_Weeks')
    partners.to_excel(writer, sheet_name = 'All_Weeks', startrow = len(df_all) + 2)
    reasons.to_excel(writer, sheet_name = 'All_Weeks', startrow = len(df_all) + 2 + len(partners) + 2)
    pct_long.to_excel(writer, sheet_name = 'All_Weeks', startrow = len(df_all) + 2 + len(partners) + 2 + len(reasons) + 2, header = False)

    writer.save()

if __name__ == '__main__':
    main()
